# -*- coding: utf-8 -*-

# 有限状态自动机(自动机)
#   状态: 初始状态、接受状态，它们组成一个特殊集合，其中一个状态可以被称为初始状态，也可以被称为接受状态
#   转移: 起初处于'初始状态', 随后顺序读取字符串中的每一个字符，并根据当前状态和读入字符，按照'转移规则', 从当前状态转移到下一个状态
#         当字符串全部读取完毕后，如果自动机处于'接受状态', 则判断该字符串'被接受', 否则判断为'被拒绝'
#   失败: 若转移过程中不存在对应'转移规则', 提前终止，判定该字符串'被拒绝'
#
# 合法的数值字符串，包含以下几个部分: 
#   1. 符合位(+-) 
#   2. 整数部分(0-9) 
#   3. 小数点 
#   4. 小数部分 
#   5. 指数部分(eE开头、可选的符号位和整数部分) 
#   6. 首末空格
# 合法的数值字符串约束规则:
#   1. 若符号位存在, 其后面必须跟着数字或小数点
#   2. 小数点的前后两侧, 至少有一侧是数字
#
# 解体思路:
#   状态定义: 0.起始空格 1.幂符号前的正负号 2.小数点前数字 3.小数点、小数点后的数字 4.小数点为空格时,小数点、小数点后的数字 5.幂符号 6. 幂符号后的正负号 7. 幂符号后的数字 8.结尾空格
#   合法的结束状态: 2、3、7、8
#   定义状态转移表，遍历字符串的字符进行状态转移; 若最终状态 in 2、3、7、8返回True，否则False

def aa(s):
    states = [
        {' ': 0, 's': 1, 'd': 2, '.': 4},
        {'d': 2, '.': 4},
        {'d': 2, '.': 3, 'e': 5, ' ': 8},
        {'d': 3, 'e': 5, ' ': 8},
        {'d': 3},
        {'s': 6, 'd': 7},
        {'d': 7},
        {'d': 7, ' ': 8},
        {' ': 8},
    ]

    p = 0
    for c in s:
        if '0' <= c <= '9': t = 'd'
        elif c in '+-': t = 's'
        elif c in 'eE': t = 'e'
        elif c in '. ': t = c
        else: t = '?'
        if t not in states[p]: return False
        p = states[p][t]
    return p in (2, 3, 7, 8)


if __name__ == "__main__":
    data = "123.45e+6"
    print aa(data)
    print aa("1.2.3")
    print aa(".")
    print aa("  .2 ")
